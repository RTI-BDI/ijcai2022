//
// Generated file, do not edit! Created by nedtool 5.6 from src/agentMSG.msg.
//

#ifndef __AGENTMSG_M_H
#define __AGENTMSG_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0506
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif


#include <vector>

typedef std::vector<int> IntVector;

/**
 * Class generated from <tt>src/agentMSG.msg:13</tt> by nedtool.
 * <pre>
 * message agentMSG
 * {
 *     int source = 0;
 *     int destination = 0;
 *     int hopCount = 0;
 *
 *     int informative = 0;
 *
 *     // scheduler related
 *     int ag_id = 0;
 *     int ag_task_id = 0;
 *     int ag_task_demander = 0;
 *     int ag_task_server = 0;
 *     double ag_task_t_finito = 0;
 *     double ag_task_release_time = 0;
 *     double ag_task_ddl = 0;
 *     double replenish = 0;
 *     // needs and services
 *     NeedPtr need;
 *     IntVector ag_needed_tasks;
 *     IntVector agents_per_need;
 *     IntVector public_tasks;
 *
 *     // negotiation related
 *     int content = 0;
 *     int neg_step = 0;
 *     int round = 0;
 *     double bid = 0;
 *     double utilization = -1;
 *     bool processed = false;
 * }
 * </pre>
 */
class agentMSG : public ::omnetpp::cMessage
{
protected:
    int source;
    int destination;
    int hopCount;
    int informative;
    int ag_id;
    int ag_task_id;
    int ag_task_plan_id;                    // BDI: id of the plan in which the task is performed.
    int ag_task_original_plan_id;           // BDI
    int ag_preempted_task_id;               // BDI
    int ag_preempted_task_plan_id;          // BDI
    int ag_task_server_id;                  // BDI
    int ag_preempted_task_server_id;        // BDI
    int ag_server_id;                       // BDI

    int ag_task_compTime;                   // BDI
    int ag_task_demander;
    int ag_task_server;
    int ag_sensor_id;                       // BDI
    int ag_sensor_plan_id;                  // BDI
    std::string ag_sensor_belief_name;      // BDI
    bool apply_reasoning_cycle_again;       // BDI
    double ag_task_release_time;
    double ag_task_ddl;
    double ag_task_absolute_ddl;            // BDI
    double ag_intention_startTime;          // BDI
    double ag_intention_firstActivation;    // BDI
    double ag_task_firstActivation;         // BDI
    double ag_task_lastActivation;          // BDI
    // JsonFileHandler extra parameters ---------------------------
    bool read_from_file;                    // BDI
    // ------------------------------------------------------
    // Internal goal arrival time ---------------------------
    int ag_internal_goal_id;                // BDI
    int ag_internal_goal_plan_id;           // BDI
    int ag_internal_goal_original_plan_id;  // BDI
    std::string ag_internal_goal_name;      // BDI
    double ag_internal_goal_request_time;   // BDI
    double ag_internal_goal_arrival_time;   // BDI
    // ------------------------------------------------------
    // Intention completed ----------------------------------
    int ag_intention_goal_id;
    int ag_intention_plan_id;
    int ag_intention_original_plan_id;
    bool ag_scheduleNewReasoningCycle;
    std::string ag_intention_goal_name; // BDI
    // ------------------------------------------------------

private:
    void copy(const agentMSG& other);

protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const agentMSG&);

public:
    agentMSG(const char *name=nullptr, short kind=0);
    agentMSG(const agentMSG& other);
    virtual ~agentMSG();
    agentMSG& operator=(const agentMSG& other);

    // field getter/setter methods
    virtual int getSource() const;
    virtual void setSource(int source);
    virtual int getDestination() const;
    virtual void setDestination(int destination);
    virtual int getHopCount() const;
    virtual void setHopCount(int hopCount);
    virtual int getInformative() const;
    virtual void setInformative(int informative);
    virtual int getAg_id() const;
    virtual void setAg_id(int ag_id);
    virtual int getAg_task_id() const;
    virtual void setAg_task_id(int ag_task_id);
    virtual int getAg_task_plan_id() const;                             // BDI
    virtual void setAg_task_plan_id(int ag_task_plan_id);               // BDI
    virtual int getAg_task_original_plan_id() const;                    // BDI
    virtual void setAg_task_original_plan_id(int ag_task_plan_id);      // BDI
    virtual int getAg_preempted_task_id() const;                        // BDI
    virtual void setAg_preempted_task_id(int);                          // BDI
    virtual int getAg_preempted_task_plan_id() const;                   // BDI
    virtual void setAg_preempted_task_plan_id(int);                     // BDI
    virtual int getAg_preempted_task_server_id();                       // BDI
    virtual void setAg_preempted_task_server_id(int);                   // BDI
    virtual int getAg_server_id();                                      // BDI
    virtual void setAg_server_id(int);                                  // BDI

    virtual int getAg_task_compTime() const;                            // BDI
    virtual void setAg_task_compTime(int ag_task_compTime);             // BDI
    virtual double getAg_task_absolute_ddl() const;                     // BDI
    virtual void setAg_task_absolute_ddl(double ag_task_absolute_ddl);  // BDI
    virtual double getAg_intention_startTime() const;                                   // BDI
    virtual void setAg_intention_startTime(double ag_intention_startTime);              // BDI
    virtual double getAg_intention_firstActivation() const;                             // BDI
    virtual void setAg_intention_firstActivation(double ag_intention_firstActivation);  // BDI
    virtual double getAg_task_firstActivation() const;                                  // BDI
    virtual void setAg_task_firstActivation(double time);                               // BDI
    virtual double getAg_task_lastActivation() const;                                   // BDI
    virtual void setAg_task_lastActivation(double time);                                // BDI

    // JsonFileHandler extra parameters ---------------------------
    virtual bool getThread_read_file_from_file() const;                             // BDI
    virtual void setThread_read_file_from_file(bool read_from_file);                // BDI

    // Internal goal arrival time ---------------------------
    virtual int getAg_internal_goal_id() const;                                          // BDI
    virtual void setAg_internal_goal_id(int id);                                         // BDI
    virtual std::string getAg_internal_goal_name() const;                                // BDI
    virtual void setAg_internal_goal_name(std::string name);                             // BDI
    virtual int getAg_internal_goal_plan_id() const;                                     // BDI
    virtual void setAg_internal_goal_plan_id(int id);                                    // BDI
    virtual int getAg_internal_goal_original_plan_id() const;                            // BDI
    virtual void setAg_internal_goal_original_plan_id(int id);                           // BDI
    virtual double getAg_internal_goal_request_time() const;                             // BDI
    virtual void setAg_internal_goal_request_time(double time);                          // BDI
    virtual double getAg_internal_goal_arrival_time() const;                             // BDI
    virtual void setAg_internal_goal_arrival_time(double time);                          // BDI
    // ------------------------------------------------------
    // Intention completed ----------------------------------
    virtual int getAg_intention_goal_id() const;                                       // BDI
    virtual void setAg_intention_goal_id(int id);                                      // BDI
    virtual int getAg_intention_plan_id() const;                                       // BDI
    virtual void setAg_intention_plan_id(int id);                                      // BDI
    virtual int getAg_intention_original_plan_id() const;                              // BDI
    virtual void setAg_intention_original_plan_id(int id);                             // BDI
    virtual std::string getAg_intention_goal_name() const;                             // BDI
    virtual void setAg_intention_goal_name(std::string name);                          // BDI
    virtual bool getAg_scheduleNewReasoningCycle() const;                              // BDI
    virtual void setAg_scheduleNewReasoningCycle(bool val);                            // BDI
    // ------------------------------------------------------

    virtual int getAg_sensor_id() const;                                    // BDI
    virtual void setAg_sensor_id(int sensor_id);                            // BDI
    virtual int getAg_sensor_plan_id() const;                               // BDI
    virtual void setAg_sensor_plan_id(int sensor_plan_id);                  // BDI
    virtual std::string getAg_sensor_belief_name() const;                   // BDI
    virtual void setAg_sensor_belief_name(std::string sensor_belief_name);  // BDI
    virtual bool getAg_apply_reasoning_cycle_again() const;                 // BDI
    virtual void setAg_apply_reasoning_cycle_again(bool val);               // BDI

    virtual int getAg_task_demander() const;
    virtual void setAg_task_demander(int ag_task_demander);
    virtual int getAg_task_server() const;
    virtual void setAg_task_server(int ag_task_server);
    virtual double getAg_task_release_time() const;
    virtual void setAg_task_release_time(double ag_task_release_time);
    virtual double getAg_task_ddl() const;
    virtual void setAg_task_ddl(double ag_task_ddl);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const agentMSG& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, agentMSG& obj) {obj.parsimUnpack(b);}


#endif // ifndef __AGENTMSG_M_H
